import h5py
import pandas as pd
import os
import time
import numpy as np

# 数据根目录
root_folder = r"D:\PCB仿真\CNC_Machining-main\data"
print(f"数据根目录: {root_folder}")
print(f"根目录存在: {os.path.exists(root_folder)}")

# 输出目录 - 修改为M02
output_dir = r"D:\PCB仿真\CNC_Machining-main\分设备数据\M02"
os.makedirs(output_dir, exist_ok=True)
print(f"输出目录: {output_dir}")

# 处理 M02 设备
machine = "M02"
print(f"\n===== 正在处理设备 {machine} =====")

# 获取实际存在的工序目录
process_dirs = [d for d in os.listdir(os.path.join(root_folder, machine))
                if os.path.isdir(os.path.join(root_folder, machine, d)) and d.startswith("OP")]

print(f"找到的工序目录: {process_dirs}")

# 遍历该设备下的所有工序
for process_dir in process_dirs:
    process_id = process_dir
    print(f"\n--- 正在处理工序 {process_id} ---")

    process_data = []
    processed_files = 0
    start_time = time.time()

    # 构建设备+工序路径
    process_path = os.path.join(root_folder, machine, process_id)
    print(f"工序路径: {process_path}")

    if not os.path.exists(process_path):
        print(f"⚠️ 工序路径不存在: {process_path}")
        continue

    # 检查good和bad子目录
    quality_paths = []
    for quality in ["good", "bad"]:
        quality_path = os.path.join(process_path, quality)
        if os.path.exists(quality_path):
            quality_paths.append((quality, quality_path))
            print(f"找到 {quality} 目录: {quality_path}")

    if not quality_paths:
        print(f"⚠️ 工序 {process_id} 没有找到good或bad目录")
        continue

    # 遍历找到的quality目录
    for quality, quality_path in quality_paths:
        files = [f for f in os.listdir(quality_path) if f.endswith(".h5")]
        print(f"在 {quality} 目录中找到 {len(files)} 个 .h5 文件")

        if not files:
            print(f"⚠️ {quality} 目录中没有.h5文件")
            continue

        for file in files:
            file_path = os.path.join(quality_path, file)
            print(f"处理文件: {file}")

            try:
                with h5py.File(file_path, "r") as f:
                    # 查找振动数据
                    x, y, z = None, None, None

                    # 可能性1: 根目录下有XYZ数据集
                    if 'X' in f and 'Y' in f and 'Z' in f:
                        x = f['X'][:]
                        y = f['Y'][:]
                        z = f['Z'][:]

                    # 可能性2: 有名为'vibration_data'的数据集
                    elif 'vibration_data' in f:
                        data = f['vibration_data'][:]
                        if len(data.shape) == 2 and data.shape[1] >= 3:
                            x = data[:, 0]
                            y = data[:, 1]
                            z = data[:, 2]

                    # 可能性3: 有名为'data'的数据集
                    elif 'data' in f:
                        data = f['data'][:]
                        if len(data.shape) == 2 and data.shape[1] >= 3:
                            x = data[:, 0]
                            y = data[:, 1]
                            z = data[:, 2]

                    # 可能性4: 有名为'sensor'或'vibration'的组
                    elif 'sensor' in f:
                        group = f['sensor']
                        if 'X' in group and 'Y' in group and 'Z' in group:
                            x = group['X'][:]
                            y = group['Y'][:]
                            z = group['Z'][:]
                        elif 'data' in group:
                            data = group['data'][:]
                            if len(data.shape) == 2 and data.shape[1] >= 3:
                                x = data[:, 0]
                                y = data[:, 1]
                                z = data[:, 2]

                    elif 'vibration' in f:
                        group = f['vibration']
                        if 'X' in group and 'Y' in group and 'Z' in group:
                            x = group['X'][:]
                            y = group['Y'][:]
                            z = group['Z'][:]
                        elif 'data' in group:
                            data = group['data'][:]
                            if len(data.shape) == 2 and data.shape[1] >= 3:
                                x = data[:, 0]
                                y = data[:, 1]
                                z = data[:, 2]

                    # 如果找不到数据，打印文件结构帮助调试
                    if x is None or y is None or z is None:
                        print("  文件结构:")


                        def print_structure(name, obj):
                            if isinstance(obj, h5py.Dataset):
                                print(f"    - 数据集: {name} (形状: {obj.shape})")
                            elif isinstance(obj, h5py.Group):
                                print(f"    - 组: {name}")


                        f.visititems(print_structure)
                        raise ValueError("未找到振动数据")

                    # 确保XYZ长度一致
                    min_len = min(len(x), len(y), len(z))
                    if min_len == 0:
                        print("  ⚠️ 数据长度为0，跳过文件")
                        continue

                    # 创建精简的DataFrame - 只保留必要数据
                    # 列标题为: 0, 1, 2, is_defect
                    df = pd.DataFrame({
                        '0': x[:min_len],  # 振动数据通道0
                        '1': y[:min_len],  # 振动数据通道1
                        '2': z[:min_len],  # 振动数据通道2
                        'is_defect': [1] * min_len if quality == "bad" else [0] * min_len  # 质量标签
                    })

                    process_data.append(df)
                    processed_files += 1
                    print(f"  ✅ 提取成功 (行: {min_len})")
            except Exception as e:
                print(f"  ❌ 失败: {str(e)}")

    # 保存该工序的数据
    if process_data:
        combined = pd.concat(process_data, ignore_index=True)
        save_path = os.path.join(output_dir, f"{machine}_{process_id}_data.csv")

        # 直接保存精简数据
        combined.to_csv(save_path, index=False)

        elapsed_time = time.time() - start_time

        # 计算文件大小
        file_size = os.path.getsize(save_path) / (1024 * 1024)  # MB

        print(f"\n✅ 工序 {process_id} 处理完成！")
        print(f"  - 共处理 {processed_files} 个文件")
        print(f"  - 数据大小: {len(combined)} 行")
        print(f"  - 文件大小: {file_size:.2f} MB")
        print(f"  - 耗时: {elapsed_time:.2f} 秒")
        print(f"  - 保存到: {save_path}")

        # 打印文件前几行预览
        print("\n文件前5行预览:")
        print(combined.head())
    else:
        print(f"\n❌ 工序 {process_id} 未找到有效数据！")

print(f"\n🎉 设备 {machine} 所有工序处理完成！")
